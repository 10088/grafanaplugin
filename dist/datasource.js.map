{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","Authorization","getAuthorization","jsonData","options","targets","buildQueryParameters","length","when","data","doRequest","method","datasourceRequest","then","response","status","message","title","res","_","map","target","find","refId","isObject","timeshift","period","datapoints","unit2millis","seconds","minutes","hours","days","weeks","months","datapoint","unit","value","hide","sqlQueries","arithmeticQueries","filter","queryType","size","targetRefIds","targetResults","fromPairs","functionArgs","join","functionBody","expression","expressionFunction","Function","values","flatMap","result","ts","groupBy","dps","dp","args","get","apply","err","console","error","tsint","parseInt","isNaN","alias","concat","ops","Promise","all","postQuery","query","sql","generateSql","isArray","generateAlias","input","_keyStr","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","charCodeAt","charAt","defaultUser","user","defaultPassword","password","encode","replace","scopedVars","queryStart","range","from","toISOString","queryEnd","to","intervalMs","variables","getVariables","re","RegExp","v","matches","match","expanded","includeAll","o","option","variable","current","reduce","exp","vv","e","vvv","sql2","fetchMetricNames","tempList","Array","forEach","item","end","push","expendable","text","Set","catch"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport \"moment\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = { 'Content-Type': 'application/json' };\n    this.headers.Authorization = this.getAuthorization(instanceSettings.jsonData);\n  }\n\n  query(options) {\n    var targets = this.buildQueryParameters(options);\n\n    if (targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      url: this.url + '/grafana/query',\n      data: targets,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n      headers: this.headers,\n      url: this.url + '/grafana/heartbeat',\n      method: 'GET',\n    }).then(response => {\n      if (!!response && response.status === 200) {\n        return { status: \"success\", message: \"TDengine Data source is working\", title: \"Success\" };\n      }\n      return { status: \"error\", message: \"TDengine Data source is not working\", title: \"Failed\" };\n    });\n  }\n\n  postQuery(options, res) {\n    res.data = _.map(res.data, function (data) {\n      let target = _.find(options.data, { refId: data.refId });\n      if (_.isObject(target.timeshift) && !!target.timeshift.period) {\n        data.datapoints = _(data.datapoints).map(datapoint => {\n          const unit2millis = {\n            seconds: 1000,\n            minutes: 60 * 1000,\n            hours: 60 * 60 * 1000,\n            days: 24 * 60 * 60 * 1000,\n            weeks: 7 * 24 * 60 * 60 * 1000,\n            months: 30 * 24 * 60 * 60 * 1000,\n          };\n          datapoint[1] += target.timeshift.period * unit2millis[target.timeshift.unit];\n          return datapoint\n        }).value();\n      }\n      data.hide = target.hide;\n      return data;\n    });\n    return res;\n  }\n  arithmeticQueries(options, res, sqlQueries) {\n    let arithmeticQueries = _.filter(options.data, { queryType: \"Arithmetic\" });\n    if (_.size(arithmeticQueries) == 0) return res;\n    let targetRefIds = _.map(sqlQueries, ({ refId }) => refId);\n    let targetResults = _(res.data).map(target => [target.refId, target]).fromPairs().value();\n    let data = _.map(arithmeticQueries, target => {\n      let functionArgs = targetRefIds.join(', ');\n      let functionBody = \"return (\" + target.expression + \");\";\n      let expressionFunction = new Function(functionArgs, functionBody);\n\n      let datapoints = _(targetResults).values()\n        .flatMap(result => _.map(result.datapoints, datapoint => {\n          return { value: datapoint[0], ts: datapoint[1], refId: result.refId };\n        }))\n        .groupBy('ts')\n        .map((datapoints, ts) => {\n          let dps = _(datapoints).map(dp => [dp.refId, dp.value]).fromPairs().value();\n          let args = _.map(targetRefIds, refId => _.get(dps, refId));\n          let result = null;\n          try {\n            result = expressionFunction.apply(this, args)\n          }\n          catch (err) {\n            console.error(\"expression function eval error:\", err);\n          }\n          let tsint = parseInt(ts);\n          return [result, _.isNaN(tsint) ? ts : tsint]\n        })\n        .value();\n      return { ...target, target: target.alias, refId: target.refId, datapoints };\n    });\n    res.data = _.concat(res.data, data);\n    return res\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    let sqlQueries = _.filter(options.data, (target) => !_.get(target, \"queryType\") || _.get(target, 'queryType') === \"SQL\");\n    let ops = _.map(sqlQueries, target => {\n      return { ...options, data: [target] }\n    });\n\n    return Promise.all(_.map(ops, target => {\n      return this.backendSrv\n        .datasourceRequest(target)\n        .then(res => this.postQuery(options, res));\n    }))\n      .then(res => {\n        return { ...res[0], data: _.flatMap(res, ({ data }) => data) };\n      }).then(res => this.arithmeticQueries(options, res, sqlQueries));\n  }\n\n  fetchMetricNames(query) {\n    let options = {\n      url: this.url + '/grafana/query',\n      data: [{ refId: \"A\", sql: query, alias: \"ref\" }],\n      method: 'POST'\n    }\n    return this.doRequest(options)\n  }\n\n  buildQueryParameters(options) {\n    var targets = _.flatMap(options.targets, target => {\n      let sql = this.generateSql(options, target);\n      if (_.isArray(sql)) {\n        return sql;\n      } else {\n        return [{\n          ...target,\n          alias: this.generateAlias(options, target),\n          sql,\n        }];\n      }\n    });\n    return targets;\n  }\n\n  encode(input) {\n    var _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var output = \"\";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      enc4 = chr3 & 63;\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n      output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n    }\n\n    return output;\n  }\n\n  getAuthorization(jsonData) {\n    jsonData = jsonData || {};\n    var defaultUser = jsonData.user || \"root\";\n    var defaultPassword = jsonData.password || \"taosdata\";\n\n    return \"Basic \" + this.encode(defaultUser + \":\" + defaultPassword);\n  }\n\n  generateTimeshift(options, target) {\n    var alias = target.alias || \"\";\n    alias = this.templateSrv.replace(alias, options.scopedVars, 'csv');\n    return alias;\n  }\n  generateAlias(options, target) {\n    var alias = target.alias || \"\";\n    alias = this.templateSrv.replace(alias, options.scopedVars, 'csv');\n    return alias;\n  }\n\n  generateSql(options, target) {\n    var sql = target.sql;\n    if (sql == null || sql == \"\") {\n      return sql;\n    }\n\n    var queryStart = \"now-1h\";\n    if (options != null && options.range != null && options.range.from != null) {\n      queryStart = options.range.from.toISOString();\n    }\n\n    var queryEnd = \"now\";\n    if (options != null && options.range != null && options.range.to != null) {\n      queryEnd = options.range.to.toISOString();\n    }\n    var intervalMs = options.intervalMs || \"20000\";\n\n    intervalMs += \"a\";\n    sql = sql.replace(/^\\s+|\\s+$/gm, '');\n    sql = sql.replace(\"$from\", \"'\" + queryStart + \"'\");\n    sql = sql.replace(\"$begin\", \"'\" + queryStart + \"'\");\n    sql = sql.replace(\"$to\", \"'\" + queryEnd + \"'\");\n    sql = sql.replace(\"$end\", \"'\" + queryEnd + \"'\");\n    sql = sql.replace(\"$interval\", intervalMs);\n\n    let variables = _(this.templateSrv.getVariables()).flatMap(v => {\n      let re = new RegExp(\"\\\\$(\\{\" + v.name + \"(:\\\\S+)?\\}|\" + v.name + \")\")\n      let matches = sql.match(re)\n      if (!!matches) {\n        return [{ matches, ...v }];\n      } else {\n        return [];\n      }\n    }).value();\n    if (!_.size(variables)) {\n      return this.templateSrv.replace(sql, options.scopedVars, 'csv');\n    }\n\n    let expanded = _(variables).map(v => {\n      if (v.includeAll) {\n        return _(v.options)\n          .filter(o => o.value != \"$__all\")\n          .map(o => { return { option: o.value, variable: v }; })\n          .value();\n      } else if (_.isArray(v.current.value)) {\n        return _(v.current.value)\n          .map(option => { return { option, variable: v }; })\n          .value();\n      } else {\n        return []\n      }\n    }).reduce((exp, vv) => {\n      return _.flatMap(vv, vvv => {\n        return exp.length ? _.map(exp, e => _.concat([e], vvv)) : [[vvv]]\n      });\n    }, []);\n\n    if (_.size(expanded) > 0) {\n      return _(expanded)\n        .map((vv, i) => {\n          let sql2 = _(vv).reduce((sql, { option, variable }) => {\n            return _.replace(sql, variable.matches[0], option)\n          }, sql);\n\n          let alias = _(vv).reduce((sql, { option, variable }) => {\n            return _.replace(sql, variable.matches[0], option)\n          }, target.alias || \"\");\n\n          sql2 = this.templateSrv.replace(sql2, options.scopedVars, 'csv');\n          return {\n            ...target,\n            alias,\n            sql: sql2,\n            queryType: \"SQL\",\n          }\n        })\n        .value();\n    } else {\n      sql = this.templateSrv.replace(sql, options.scopedVars, 'csv');\n      return sql;\n    }\n  }\n  metricFindQuery(query, options) {\n    return this.fetchMetricNames(query).then((res) => {\n      let tempList = [];\n      (Array.isArray(_.get(res, 'data')) ? res.data : []).forEach((item) => {\n        (Array.isArray(item.datapoints) ? item.datapoints : []).forEach(\n          (end) => {\n            tempList.push({\n              expendable: false,\n              text: end[0],\n              value: end[0],\n            });\n          }\n        );\n      });\n      return Array.from(new Set(tempList));\n    }).catch(err => {\n      console.error(\"err: \", err)\n    });\n  }\n\n}\n"]}